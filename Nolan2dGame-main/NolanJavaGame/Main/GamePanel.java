package Main;


/**
 * Write a description of class GamePanel here.
 *
 * @author Nolan Peterson
 * @version 2/10/2023
 */
import java.awt.Dimension;
import javax.swing.JPanel;
import java.awt.Color; // allows me to add colour
import java.awt.Graphics;
import java.awt.Graphics2D;
public class GamePanel extends JPanel implements Runnable
{
   // settup for your screen/game. Could become an import from a settings file.
   final int baseTileSize = 16; 
   // The characters will be 16x16 'Tiles', can be changed later using scale
   final int scale = 2;
   final int realTileSize = baseTileSize * scale; // Real size is base * scale,
   final int maxScreenCollum = 16;
   final int maxScreenRow=12; //16:12 is 4:3 Aspect ratio. Probably will change
   final int screenWidth = realTileSize * maxScreenCollum; 
   final int screenHeight = realTileSize * maxScreenRow; //screen width and height will be the amount of pixels.
  
  KeyInput keyI = new KeyInput(); 
   Thread gameThread;
   
   // Setting the player's default position
   int playerX = 100;
int playerY = 100; 
int playerSpeed = 6;

// FPS LOCKER
int framesPerSecond=30;
public GamePanel () {
    this.setPreferredSize(new Dimension(screenWidth, screenHeight));
    this.setBackground(Color.black);
    this.addKeyListener(keyI);  // Listens for the KeyInput
    this.setFocusable(true); // The game can be 'focused' in windows

}
public void startGame() { // calls the 'run' method to start.
 gameThread = new Thread(this);
 gameThread.start();
    
}
public void run() { // the loop in which the game runs
while(gameThread != null){
    System.out.println("Game Loop is running.");
    // This can be used to broadcast character position, and draw the screen.
    double drawInterval = 1000000000/framesPerSecond; //30 FPS
    double nextDrawTime = System.nanoTime() + drawInterval;


update();
repaint(); // will redraw game on every loop.


try {
    double remainingTime = nextDrawTime - System.nanoTime();
    remainingTime=remainingTime/1000000;
    
    if (remainingTime <0) {
remainingTime=0;
    }
    Thread.sleep((long)remainingTime);
nextDrawTime += drawInterval;
} catch (InterruptedException e) {
    // Try and catch statement auto generated by VSC
    e.printStackTrace();
}
}
}
public void update() {
if (keyI.wKeyDown == true){
    playerY -=playerSpeed;
    
}
if (keyI.sKeyDown==true){
    playerY +=playerSpeed;

}
if (keyI.aKeyDown==true){
    playerX-=playerSpeed;

}
if (keyI.dKeyDown==true){
    playerX+=playerSpeed;
}
}
public void paintComponent(Graphics g){ //java plugin for graphics.
    super.paintComponent(g);
Graphics2D g2 = (Graphics2D)g;
g2.setColor(Color.white);
g2.fillRect(playerX,playerY,realTileSize,realTileSize);
g2.dispose();
}
}


